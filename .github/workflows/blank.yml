name: Docker Build and Push

# Workflow'un çalışacağı olaylar
on:
  # Manuel tetikleme için workflow_dispatch ekledim
  workflow_dispatch:
  # Push olayları için
  push:
    branches: [ main, master ]
  # Pull request olayları (isteğe bağlı)
  # pull_request:
  #   branches: [ main, master ]

# İzinleri en aza indiriyoruz
permissions: {}

env:
  DOCKER_REGISTRY: registry.nexusdeploy.com
  IMAGE_NAME: public/test
  STACK_NAME: test-app

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Proje Adını Ayıkla
        id: project
        run: echo "project_name=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT


      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest

      # SSH anahtarını ayarlama adımı
      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # SSH ile sunucuya bağlanma (örnek)
      - name: Connect to SSH server
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "echo SSH bağlantısı başarılı"


      - name: Deploy Stack to Swarm
        run: |
          file_path=$GITHUB_WORKSPACE/docker-compose.yml

          # Dosyanın mevcut olup olmadığını kontrol et
          if [ ! -f "$file_path" ]; then
            echo "Hata: '$file_path' dosyası bulunamadı."
          fi
          
          # node.labels.XXX == YYY pattern'lerini ara ve çıkar
          echo "Dosya: $file_path"
          
          # grep ile node.labels. içeren satırları bul
          # sed ile XXX ve YYY kısımlarını çıkar
          grep -o "node\.labels\.[a-zA-Z0-9_]*\s*==\s*[a-zA-Z0-9_]*" "$file_path" | while read -r line; do
            # Etiket (XXX) kısmını çıkar
            label_key=$(echo "$line" | sed -E 's/node\.labels\.([a-zA-Z0-9_]*)\s*==\s*.*/\1/')
          
            # Değer (YYY) kısmını çıkar
            label_value=$(echo "$line" | sed -E 's/.*==\s*([a-zA-Z0-9_]*)/\1/')
            echo "Etiket: $label_key, Değer: $label_value"
          
            file_path=$GITHUB_WORKSPACE/.github/deploy/$label_key
            # Dosyanın mevcut olup olmadığını kontrol et
            if [ -f "$file_path" ]; then
              echo "Instance configuration found"
              ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                mkdir -p /opt/swarm/deployer/stacks
              "
              scp .github/deploy/* ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/opt/swarm/deployer/stacks/${{ env.STACK_NAME }}
              
              ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "
                sudo mkdir -p /***/.config
                sudo doctl auth init --access-token ${{ secrets.DIGITALOCEAN_TOKEN }}
                cd /opt/swarm/deployer
                make create
              "
            fi
          done
          
          # Dosyayı uzak sunucuya kopyala (SCP kullanarak)
          scp docker-compose.yml ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:/tmp/docker-compose.yml
          
          
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            
            echo "HEEEEEEEREEEEEEEEEEEEEEEEEEEEE"
            sudo mkdir -p /***/.config
            sudo doctl auth init --access-token ${{ secrets.DIGITALOCEAN_TOKEN }}
            IP=$(doctl compute droplet get "manager-1" --format PublicIPv4 --no-header) || true
          
            echo "HEEEEEEEREEEEEEEEEEEEEEEEEEEEE"
            echo $IP
            echo "HEEEEEEEREEEEEEEEEEEEEEEEEEEEE"
          
            # GITHUB_WORKSPACE dizinini oluştur
            mkdir -p /opt/github_workspace/${{ steps.project.outputs.project_name }}
          
            # Geçici konumdaki dosyayı hedef dizine taşı
            mv /tmp/docker-compose.yml /opt/github_workspace/${{ steps.project.outputs.project_name }}/
          
            # Stack dizinine git ve dağıtımı yap
            cd /opt/github_workspace/${{ steps.project.outputs.project_name }}
            ls -la /opt/github_workspace/${{ steps.project.outputs.project_name }}
          
            # Stack'i dağıt
            docker stack deploy -c docker-compose.yml ${{ steps.project.outputs.project_name }}
          
            echo "${{ steps.project.outputs.project_name }} stack'i başarıyla dağıtıldı"
            docker service update --image registry.nexusdeploy.com/public/test:latest --force ${{ steps.project.outputs.project_name }}_php-app
            docker service ls
          EOF